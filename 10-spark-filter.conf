filter {
  if [type] == "sparkmaster-1.hadoop.log" {
    multiline {
      pattern => "^%{TIMESTAMP_ISO8601}%{SPACE}"
      negate => true
      what => "previous"
    }
    grok {
      match => [ "message", "%{TIMESTAMP_ISO8601:dateandtime}%{SPACE}%{NOTSPACE:severity}%{SPACE}%{NOTSPACE:className}:%{SPACE}%{GREEDYDATA:message}" ]
      overwrite => [ "message" ]
    }
  }
  if [type] == "sparkmaster-1.master.log" {
    multiline {
      pattern => "^%{TIMESTAMP_ISO8601}%{SPACE}"
      negate => true
      what => "previous"
    }
    grok {
      match => [ "message", "%{TIMESTAMP_ISO8601:dateandtime}%{SPACE}%{NOTSPACE:severity}%{SPACE}%{NOTSPACE:className}:%{SPACE}%{GREEDYDATA:message}" ]
      overwrite => [ "message" ]
    }
  }
  if [type] == "sparkmaster-1.messages.log" {
    multiline {
      pattern => "(^\[\d)|(WebSphere Application Server)"
      negate => true
      what => "previous"
    }
    grok {
      match => [ "message", "(?m)\[%{DATA:dateandtime}\]%{SPACE}%{WORD:threadId}%{SPACE}%{NOTSPACE:className}%{SPACE}%{NOTSPACE:severity}%{SPACE}%{GREEDYDATA:message}" ]
      overwrite => [ "message" ]
    }
  }
  if [type] == "sparkmaster-1.trace.log" {
    multiline {
      pattern => "(^\[\d)|(WebSphere Application Server)"
      negate => true
      what => "previous"
    }
    grok {
      match => [ "message", "(?m)\[%{DATA:dateandtime}\]%{SPACE}%{WORD:threadId}%{SPACE}id=%{BASE16NUM:id}?%{SPACE}%{NOTSPACE:className}%{SPACE}%{NOTSPACE:eventType}%{SPACE}%{NOTSPACE:methodName}%{SPACE}%{GREEDYDATA:message}" ]
      overwrite => [ "message" ]
    }
  }
  if [type] == "sparkmaster-1.zkfc.log" {
    multiline {
      pattern => "^%{TIMESTAMP_ISO8601}%{SPACE}"
      negate => true
      what => "previous"
    }
    grok {
      match => [ "message", "%{TIMESTAMP_ISO8601:dateandtime}%{SPACE}%{NOTSPACE:severity}%{SPACE}%{NOTSPACE:className}:%{SPACE}%{GREEDYDATA:message}" ]
      overwrite => [ "message" ]
    }
  }
  if [type] == "sparkmaster-1.supervisord.log" {
    grok {
      match => [ "message", "%{TIMESTAMP_ISO8601:dateandtime}%{SPACE}%{NOTSPACE:severity}%{SPACE}%{GREEDYDATA:message}" ]
      overwrite => [ "message" ]
    }
  }
  if [type] == "sparkmaster-2.hadoop.log" {
    multiline {
      pattern => "^%{TIMESTAMP_ISO8601}%{SPACE}"
      negate => true
      what => "previous"
    }
    grok {
      match => [ "message", "%{TIMESTAMP_ISO8601:dateandtime}%{SPACE}%{NOTSPACE:severity}%{SPACE}%{NOTSPACE:className}:%{SPACE}%{GREEDYDATA:message}" ]
      overwrite => [ "message" ]
    }
  }
  if [type] == "sparkmaster-2.master.log" {
    multiline {
      pattern => "^%{TIMESTAMP_ISO8601}%{SPACE}"
      negate => true
      what => "previous"
    }
    grok {
      match => [ "message", "%{TIMESTAMP_ISO8601:dateandtime}%{SPACE}%{NOTSPACE:severity}%{SPACE}%{NOTSPACE:className}:%{SPACE}%{GREEDYDATA:message}" ]
      overwrite => [ "message" ]
    }
  }
  if [type] == "sparkmaster-2.messages.log" {
    multiline {
      pattern => "(^\[\d)|(WebSphere Application Server)"
      negate => true
      what => "previous"
    }
    grok {
      match => [ "message", "(?m)\[%{DATA:dateandtime}\]%{SPACE}%{WORD:threadId}%{SPACE}%{NOTSPACE:className}%{SPACE}%{NOTSPACE:severity}%{SPACE}%{GREEDYDATA:message}" ]
      overwrite => [ "message" ]
    }
  }
  if [type] == "sparkmaster-2.trace.log" {
    multiline {
      pattern => "(^\[\d)|(WebSphere Application Server)"
      negate => true
      what => "previous"
    }
    grok {
      match => [ "message", "(?m)\[%{DATA:dateandtime}\]%{SPACE}%{WORD:threadId}%{SPACE}id=%{BASE16NUM:id}?%{SPACE}%{NOTSPACE:className}%{SPACE}%{NOTSPACE:eventType}%{SPACE}%{NOTSPACE:methodName}%{SPACE}%{GREEDYDATA:message}" ]
      overwrite => [ "message" ]
    }
  }
  if [type] == "sparkmaster-2.zkfc.log" {
    multiline {
      pattern => "^%{TIMESTAMP_ISO8601}%{SPACE}"
      negate => true
      what => "previous"
    }
    grok {
      match => [ "message", "%{TIMESTAMP_ISO8601:dateandtime}%{SPACE}%{NOTSPACE:severity}%{SPACE}%{NOTSPACE:className}:%{SPACE}%{GREEDYDATA:message}" ]
      overwrite => [ "message" ]
    }
  }
  if [type] == "sparkmaster-2.supervisord.log" {
    grok {
      match => [ "message", "%{TIMESTAMP_ISO8601:dateandtime}%{SPACE}%{NOTSPACE:severity}%{SPACE}%{GREEDYDATA:message}" ]
      overwrite => [ "message" ]
    }
  }
  if [type] == "sparkworker.hadoop.log" {
    multiline {
      pattern => "^%{TIMESTAMP_ISO8601}%{SPACE}"
      negate => true
      what => "previous"
    }
    grok {
      match => [ "message", "%{TIMESTAMP_ISO8601:dateandtime}%{SPACE}%{NOTSPACE:severity}%{SPACE}%{NOTSPACE:className}:%{SPACE}%{GREEDYDATA:message}" ]
      overwrite => [ "message" ]
    }
  }
  if [type] == "sparkworker.worker.log" {
    multiline {
      pattern => "^%{TIMESTAMP_ISO8601}%{SPACE}"
      negate => true
      what => "previous"
    }
    grok {
      match => [ "message", "%{TIMESTAMP_ISO8601:dateandtime}%{SPACE}%{NOTSPACE:severity}%{SPACE}%{NOTSPACE:className}:%{SPACE}%{GREEDYDATA:message}" ]
      overwrite => [ "message" ]
    }
  }
  if [type] == "sparkworker.executor.log" {
    multiline {
      pattern => "^%{TIMESTAMP_ISO8601}%{SPACE}"
      negate => true
      what => "previous"
    }
    grok {
      match => [ "message", "%{TIMESTAMP_ISO8601:dateandtime}%{SPACE}%{NOTSPACE:severity}%{SPACE}%{NOTSPACE:className}:%{SPACE}%{GREEDYDATA:message}" ]
      overwrite => [ "message" ]
    }
  }
  if [type] == "sparkworker.supervisord.log" {
    grok {
      match => [ "message", "%{TIMESTAMP_ISO8601:dateandtime}%{SPACE}%{NOTSPACE:severity}%{SPACE}%{GREEDYDATA:message}" ]
      overwrite => [ "message" ]
    }
  }
}
